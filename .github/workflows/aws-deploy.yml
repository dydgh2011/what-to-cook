name: AWS Deplyment
run-name: ${{ github.actor}} is deploying to EC2
on:
  push:
    branches:
      - main
jobs:
  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Connect to EC2 SSH
        run: |
          set -e
          echo "$EC2_KEY" > private_key && chmod 600 private_key
          ls
          pwd
          echo ${{secrets.DB_USERNAME}}

      - name: Connect to EC2 SSH
        run: |
          set -e
          echo "${{EC2_KEY}}" > private_key && chmod 600 private_key
          ls
          ssh -o StrictHostKeyChecking=no -i private_key ${{EC2_USER}}@${{EC2_HOST}} '
            ls
            pwd
            mkdir ${{secrets.DB_USERNAME}}
          '

      # - name: Terminate Current Docker Container
      #   run: |
      #     set -e
      #     ls
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       if [ -n "$(sudo docker ps -a -q)" ]; then
      #           sudo docker stop $(sudo docker ps -a -q)
      #       fi
      #     '
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       if [ -n "$(sudo docker container ls -a -q)" ]; then
      #           sudo docker rm $(sudo docker container ls -a -q)
      #       fi
      #     '

      # - name: Remove Old Docker Image
      #   run: |
      #     set -e
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       if [ -n "$(sudo docker image ls -a -q)" ]; then
      #           sudo docker rmi $(sudo docker image ls -a -q)
      #       fi
      #     '

      # - name: Remove Old src directory
      #   run: |
      #     set -e
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       sudo rm -r -f what-to-cook
      #     '

      # - name: Send files To EC2
      #   run: |
      #     set -e
      #     scp -r -o StrictHostKeyChecking=no -i private_key /home/runner/work/what-to-cook/what-to-cook ${EC2_USER}@${EC2_HOST}:/home/ubuntu
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       pwd
      #       ls
      #     '

      # - name: Run Docker Container With New Image
      #   run: |
      #     set -e
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       sudo docker load -i server-image.tar
      #       df -h
      #       sudo docker run -d -p 80:80 --name server what-to-cook-image
      #       sudo rm server-image.tar
      #     '

      # - name: Check If Container is Running
      #   run: |
      #     set -e
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
      #       sudo docker ps
      #     '
